<?xml version="1.0" encoding="UTF-8" ?>
<!-- Attributes for controlling the duration and type of analysis. -->
<analysis>
    <!-- The initial agent amount to create. -->
    <initial_agents>10</initial_agents>
    <!-- The maximum amount of agents for which to allocate. Once the network
    has grown to this amount, the agent add rate will artifically drop to 0. -->
    <max_agents>1000</max_agents>
    <!-- The maximum simulation-time for the simulation. Once it has elapsed,
     the simulation halts. Interacting with the simulation does not alter the
     simulation-time. In simulated minutes. -->
    <max_time>100000</max_time>
    <!-- The maximum number of steps to be made in the KMC loop. For superior
     results, set this value to 'unlimited'. -->
    <max_analysis_steps>unlimited</max_analysis_steps>
    <!-- The maximum real-time for the simulation. Once it has elapsed, the
     simulation halts. Note that interacting with the simulation DOES detract
     from this time. In minutes. -->
    <max_real_time>1</max_real_time>
    <!-- Whether interactive mode should be triggered by Ctrl+c or
     ./scripts/stop.sh (triggers SIGUSR1). -->
    <enable_interactive_mode>false</enable_interactive_mode>
    <!-- Whether to use runtime Lua functions that can react to events.
     **Slow!** Hooks are availble for running on every tweet, retweet, follow,
     etc. Defined in same file as interactive_mode. Can slow down
     simulation considerably. -->
    <enable_lua_hooks>false</enable_lua_hooks>
    <!-- Script to use to define the behaviour of interactive mode as well as
     lua hooks. Defines behaviour of interactive mode & lua hooks. -->
    <lua_script>INTERACT.lua</lua_script>
    <!-- If true, agents will make a certain number of connections set by
     barabasi_connections. -->
    <use_barabasi>false</use_barabasi>
    <!-- number of connections we want to make when use_barabasi == true -->
    <barabasi_connections>100</barabasi_connections>
    <!-- The value of the exponent assigned to each agent's
     cumulative-degree. -->
    <barabasi_exponent>1</barabasi_exponent>
    <!-- If true, simulation time will be incremented at a non-constant rate.
     Increments by 1/sum(rates) on average -->
    <use_random_time_increment>false</use_random_time_increment>
    <!-- Whether to enable follow-back in the simulation. From literature, it
     makes sense for a realistic system to have followback enabled -->
    <use_followback>false</use_followback>
    <!-- Whether to enable following via retweets in the simulation. -->
    <use_follow_via_retweets>false</use_follow_via_retweets>
    <!-- Accepted models: 'random', 'twitter_suggest', 'agent',
     'preferential_agent', 'hashtag', 'twitter' -->
    <follow_model>twitter_suggest</follow_model>
    <!-- The normalized probability of calling each follow model ONLY for the
     'twitter' follow model. -->
    <model_weights>
        <random>0</random>
        <twitter_suggest>0</twitter_suggest>
        <agent>0</agent>
        <preferential_agent>0</preferential_agent>
        <hashtag>0</hashtag>
    </model_weights>
    <!-- Whether to have an unfollow model assuming constant 'chattiness',
     compares the chattiness of an agent wrt to the following set. -->
    <stage1_unfollow>false</stage1_unfollow>
    <!-- Tweets per simulated minute. Chattiness for which to be considered for
     unfollow. -->
    <unfollow_tweet_rate>10000</unfollow_tweet_rate>
    <!-- The probability that tweets will contain a hashtag. -->
    <use_hashtag_probability>0.5</use_hashtag_probability>
</analysis>
<rates>
    <!-- The rate function for adding agents to the network. -->
    <add>
        <function>constant</function>
        <value>1.0</value>
    </add>
</rates>
<!--  Various options for the output of the simulation, both while it runs and
 for post-analysis. -->
<output>
    <save_network_on_timeout>true</save_network_on_timeout>
    <load_network_on_startup>true</load_network_on_startup>
    <!-- Whether to allow loading configuration with mismatching configuration
     (generally OK) -->
    <ignore_load_config_check>true</ignore_load_config_check>
    <!-- File to save to, and load from -->
    <save_file>network_state.dat</save_file>
    <stdout_basic>true</stdout_basic>
    <stdout_summary>true</stdout_summary>
    <summary_output_rate>1</summary_output_rate>
    <visualize>true</visualize>
    <agent_stats>true</agent_stats>
    <degree_distributions>true</degree_distributions>
    <tweet_analysis>true</tweet_analysis>
    <retweet_visualization>true</retweet_visualization>
    <main_statistics>true</main_statistics>
    <degree_distribution_by_follow_model>true</degree_distribution_by_follow_model>
    <region_connection_matrix>true</region_connection_matrix>
    <categories_distro>true</categories_distro>
    <most_popular_tweet_content>true</most_popular_tweet_content>
</output>
<!-- Options for the categorization based on various attributes. -->
<tweet_ranks>
    <thresholds>
        <bin_spacing>linear</bin_spacing>
        <min>10</min>
        <max>500</max>
        <increment>10</increment>
    </thresholds>
</tweet_ranks>
<retweet_ranks>
    <thresholds>
        <bin_spacing>linear</bin_spacing>
        <min>10</min>
        <max>500</max>
        <increment>10</increment>
    </thresholds>
</retweet_ranks>
<!-- MUST be adjusted for max_agents for simulations which implement the
 'twitter_suggest' and/or 'preferential_agent' follow models -->
<follow_ranks>
    <thresholds>
        <bin_spacing>linear</bin_spacing>
        <min>0</min>
        <max>1000</max>
        <increment>1</increment>
    </thresholds>
    <weights>
        <bin_spacing>linear</bin_spacing>
        <min>1</min>
        <max>1001</max>
        <increment>1</increment>
    </weights>
</follow_ranks>
<!-- An observation probability density function that gives the probability
 that a tweet is observed at a certain time by an 'ideal observer'. An 
 'ideal observer' is one which always sees a tweet, eventually.' The observation
 PDF is used for both retweeting and follow-from-tweet. We combine this with a
 relevance factor, r, where 0.0 <= r <= 1.0. We in turn determine the probability
 that a given agent will act on a given tweet, with enough time. -->
<tweet_observation>
    <!-- Probability 'density' function to sample logarithmatically. Provided as
     if a Python function of 'x'. It is integrated, and after integration, the
     function will be normalized for you. Note: technically not a true PDF
     because one does NOT need to have an integral range that sums to 1.0. -->
    <density_function>2.45 / (x)**1.1</density_function>
    <!-- In arbitrary units. The beginning x-value to integrate from. -->
    <x_start>1</x_start>
    <!-- In arbitrary units. The end x-value to integrate to. -->
    <x_end>600</x_end>
    <!-- In arbitrary units. The initial binning resolution. That is, the x-step
     with which to begin binning. The binning resolution is decreased from there
     on. -->
    <initial_resolution>1</initial_resolution>
    <!-- How quickly the resolution grows from one bin to the next. Quicker is
     more efficient, but with less precise rates in later bins. -->
    <resolution_growth_factor>1.05</resolution_growth_factor>
    <!-- In simulated minutes. The time over which the function is defined.
     After this, tweets will 'disappear'. -->
    <time_span>8*hour</time_span>
</tweet_observation>
<!-- Abstract categorizations of similar beliefs. The amount of ideologies MUST
 be less than or equal to the value set for N_BIN_IDEOLOGIES in
 config_static.h! -->
<ideologies>
    <name>Red</name>
</ideologies>
<ideologies>
    <name>Blue</name>
</ideologies>
<ideologies>
    <name>Green</name>
</ideologies>
<ideologies>
    <name>Orange</name>
</ideologies>
<!-- Locations, such as countries, can be represented abstractly. Note that the
 number of regions must match the value set for N_BIN_REGIONS in config_static.h
 EXACTLY! -->
<regions>
    <name>Ontario</name>
    <!-- The weight with which this region is chosen. -->
    <add_weight>5</add_weight>
    <!-- Normalized probability that an agent has a particular
     'preference_class' -->
    <preference_class_weights>
        <NoRetweetPref>100</NoRetweetPref>
    </preference_class_weights>
    <!-- Normalized probability that an agent has a particular 'ideology' -->
    <ideology_weights>
        <Red>100</Red>
        <Blue>100</Blue>
        <Green>100</Green>
        <Orange>100</Orange>
    </ideology_weights>
    <!-- Normalized probability that an agent speaks a particular 'language'-->
    <language_weights>
        <English>100</English>
        <French>0</French>
        <Spanish>0</Spanish>
        <French+English>0</French+English>
    </language_weights>
</regions>
<regions>
    <name>Quebec</name>
    <add_weight>0</add_weight>
    <preference_class_weights>
        <NoRetweetPref>100</NoRetweetPref>
    </preference_class_weights>
    <ideology_weights>
        <Red>100</Red>
        <Blue>100</Blue>
        <Green>100</Green>
        <Orange>100</Orange>
    </ideology_weights>
    <language_weights>
        <English>0</English>
        <French>100</French>
        <Spanish>0</Spanish>
        <French+English>0</French+English>
    </language_weights>
</regions>
<regions>
    <name>Mexico</name>
    <add_weight>0</add_weight>
    <preference_class_weights>
        <NoRetweetPref>100</NoRetweetPref>
    </preference_class_weights>
    <ideology_weights>
        <Red>100</Red>
        <Blue>100</Blue>
        <Green>100</Green>
        <Orange>100</Orange>
    </ideology_weights>
    <language_weights>
        <English>0</English>
        <French>0</French>
        <Spanish>100</Spanish>
        <French+English>0</French+English>
    </language_weights>
</regions>
<!-- The different preference stereotypes that users in the network can have. -->
<preference_classes>
    <name>StandardPref</name>
    <!-- The transmission probability for tweets made by agents of a particular
     agent type given tweet content and the tweet observation PDF. Effectively,
     this determines the proportion (on average) of tweets made by this agent
     type that will be retweeted.

    Can be provided for an agent type, or the keys 'else' or 'all'. 
    Both 'else' and 'all' have the functionality of defining the transmission
    probability function for all otherwise unspecified agent types.

    Transmission probability functions are automatically converted into the
    necessary tables using Python. The strings provided can be any valid Python.
    -->
    <tweet_transmission>
        <plain><!-- Also applies to musical tweets -->
            <Standard>0.01</Standard>
            <Celebrity>0.01</Celebrity>
            <else>0.01</else>
        </plain>
        <different_ideology>
            <Standard>0</Standard>
            <Celebrity>0</Celebrity>
            <else>0</else>
        </different_ideology><!-- generally no retweeting of tweets with
         different ideological content -->
        <same_ideology>
            <Standard>0.01</Standard>
            <Celebrity>0.01</Celebrity>
            <else>0.01</else>
        </same_ideology>
        <humorous>
            <Standard>0.02</Standard>
            <Celebrity>0.02</Celebrity>
            <else>0.02</else>
        </humorous>
    </tweet_transmission>
</preference_classes>
<preference_classes>
    <name>NoRetweetPref</name>
    <tweet_transmission>
        <plain>
            <Standard>0</Standard>
            <Celebrity>0</Celebrity>
            <else>0</else>
        </plain>
        <different_ideology>
            <Standard>0</Standard>
            <Celebrity>0</Celebrity>
            <else>0</else>
        </different_ideology>
        <same_ideology>
            <Standard>0</Standard>
            <Celebrity>0</Celebrity>
            <else>0</else>
        </same_ideology>
        <humorous>
            <Standard>0</Standard>
            <Celebrity>0</Celebrity>
            <else>0</else>
        </humorous>
    </tweet_transmission>
</preference_classes>
<!-- The different types of agents in the network, and their associated
 rates. -->
<agents>
    <name>Standard</name>
    <weights>
        <!-- Weight with which this agent is created -->
        <add>100</add>
        <!-- Weight with which this agent is followed in 'agent' follow model -->
        <follow>20</follow>
        <tweet_type>
            <ideological>1</ideological>
            <plain>1</plain>
            <musical>1</musical>
            <humorous>1</humorous>
        </tweet_type>
    </weights>
    <!-- Probability that following this agent results in a follow-back -->
    <followback_probability>0.44</followback_probability>
    <hashtag_follow_options>
        <!-- does the agent care about where the agent they will follow is from? -->
        <care_about_region>false</care_about_region>
        <!-- does the agent care about the ideology of the agent they will follow? -->
        <care_about_ideology>false</care_about_ideology>
    </hashtag_follow_options>
    <rates>
        <follow><!-- Rate for follows from this agent: -->
            <function>linear</function>
            <y_intercept>0.001</y_intercept>
            <slope>0.001</slope>
        </follow>
        <tweet><!-- Rate for tweets from this agent: -->
            <function>constant</function>
            <value>0</value>
        </tweet>
    </rates>
</agents>
<agents>
    <name>Celebrity</name>
    <weights>
        <!-- Weight with which this agent is created -->
        <add>100</add>
        <!-- Weight with which this agent is followed in 'agent' follow model -->
        <follow>80</follow>
        <tweet_type>
            <ideological>1</ideological>
            <plain>1</plain>
            <musical>1</musical>
            <humorous>1</humorous>
        </tweet_type>
    </weights>
    <!-- Probability that following this agent results in a follow-back -->
    <followback_probability>0.01</followback_probability>
    <hashtag_follow_options>
        <!-- does the agent care about where the agent they will follow is from? -->
        <care_about_region>false</care_about_region>
        <!-- does the agent care about the ideology of the agent they will follow? -->
        <care_about_ideology>false</care_about_ideology>
    </hashtag_follow_options>
    <rates>
        <follow><!-- Rate for follows from this agent: -->
            <function>linear</function>
            <y_intercept>0.00001</y_intercept>
            <slope>0.00001</slope>
        </follow>
        <tweet><!-- Rate for tweets from this agent: -->
            <function>constant</function>
            <value>0</value>
        </tweet>
    </rates>
</agents>
